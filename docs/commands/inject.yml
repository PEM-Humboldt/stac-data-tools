title: "Inject command"
description: >
  Inject items into collection.json from .tif files.

examples:
  - name: "Basic Injection with Backup"
    descriptions:
      - cmd: "python src/main.py inject -f my_folder"
  - name: "Injection without Backup"
    descriptions:
      - cmd: "python src/main.py inject -f my_folder --no-backup"
      - text: "Using full parameter names:"
        cmd: "python src/main.py inject --folder my_folder --no-backup"
notes:
  - title: "Process Overview"
    description: |
      The inject command:
      1. Reads the `collection.json` from `input/<folder>`
      2. Replaces the "items" section using the `.tif` files in that folder
      3. Preserves all other collection information
      4. Generates an updated `collection.json`
  - title: "File Requirements"
    description: |
      - The collection folder must be in the `input` directory
      - `.tif` files must include in their name either:
          - A year (e.g., `2005`)
          - A period (e.g., `2000_2005` or `2000-2005`)
      - The folder must contain a valid `collection.json` file
  - title: "Command Behavior"
    description: |
      - By default, creates a backup of the original `collection.json`
      - Use `--no-backup` to skip backup creation
      - Fails if duplicate years/periods are found in file names
      - The resulting `collection.json` is ready for collection creation/update
  - title: "Best Practices"
    description: |
      - Always review the generated `collection.json` after injection
      - Keep backups of important collections
      - Validate the collection after injection
      - Use consistent naming patterns for your .tif files