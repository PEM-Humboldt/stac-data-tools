{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"STAC-DATA-TOOLS CLI","text":"<p>\ud83d\ude80 STAC-DATA-TOOLS CLI is a command-line tool for uploading, validating, and transforming geospatial data into catalogs under the STAC (SpatioTemporal Asset Catalogs) specification.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udcc2 Create, validate, and remove STAC collections</li> <li>\ud83d\udef0\ufe0f Process and validate raster data for STAC integration</li> <li>\ud83d\udee0\ufe0f Automatically inject items from <code>.tif</code> files into existing collections</li> <li>\u2705 Ensure compliance with STAC specification standards</li> <li>\ud83d\udcbe Backup and version management for collections</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Clone the repository and activate the Conda environment with dependencies:</p> <pre><code>git clone https://github.com/PEM-Humboldt/stac-data-tools.git\ncd stac-data-tools\nconda env create -f environment.yml\nconda activate sdt-conda-env\n</code></pre> <p>For more information about installation and configuration, please check the repository.</p>"},{"location":"command/","title":"{{ no such element: dict object['title'] }}","text":"<p>{{ no such element: dict object['description'] }}</p>"},{"location":"create/","title":"Create command","text":"<p>Create a new collection.</p>"},{"location":"create/#examples","title":"Examples","text":""},{"location":"create/#creating-a-new-collection","title":"Creating a New Collection","text":"<p>Using the command with a collection name:</p> <pre><code>python src/main.py create -f my_folder -c my_collection\n</code></pre> <p>Alternative syntax with full parameter names:</p> <pre><code>python src/main.py create --folder my_folder --collection my_collection\n</code></pre> <p>This will create a collection named <code>my_collection</code> using the files in <code>input/my_folder</code>.</p>"},{"location":"create/#overwriting-an-existing-collection","title":"Overwriting an Existing Collection","text":"<p>To overwrite an existing collection, use the <code>-o</code> or <code>--overwrite</code> flag:</p> <pre><code>python src/main.py create -f my_folder -o\n</code></pre> <p>With a specific collection name:</p> <pre><code>python src/main.py create -f my_folder -c my_collection -o\n</code></pre> <p>Using full parameter names:</p> <pre><code>python src/main.py create --folder my_folder --collection my_collection --overwrite\n</code></pre> <p>These commands will overwrite the existing collection if it already exists, using the files from <code>input/my_folder</code>.</p>"},{"location":"create/#notes","title":"Notes","text":""},{"location":"create/#general-setup","title":"General Setup","text":"<ul> <li>The collection folder must be placed in the <code>input</code> directory.</li> <li>The input folder must contain:<ul> <li>A <code>collection.json</code> file that describes the collection</li> <li>The corresponding layer files (.tif)</li> </ul> </li> <li>The <code>collection.json</code> must follow the specification described in <code>spec/collection.md</code>.</li> <li>Use <code>collection.example.json</code> as a template for creating your collection configuration.</li> </ul>"},{"location":"create/#command-behavior","title":"Command Behavior","text":"<ul> <li>If no collection name is provided with <code>-c</code>, the <code>id</code> from collection.json will be used.</li> <li>Without the <code>-o</code> flag, the command will fail if the collection already exists.</li> <li>With <code>-o</code> flag, any existing collection with the same name will be completely replaced.</li> <li>The folder must contain valid STAC assets.</li> <li>This command does not validate items, only the collection structure.</li> <li>You can combine this command with validate after creation for consistency checks.</li> </ul>"},{"location":"inject/","title":"Inject command","text":"<p>Inject items into collection.json from .tif files.</p>"},{"location":"inject/#examples","title":"Examples","text":""},{"location":"inject/#basic-injection-with-backup","title":"Basic Injection with Backup","text":"<pre><code>python src/main.py inject -f my_folder\n</code></pre>"},{"location":"inject/#injection-without-backup","title":"Injection without Backup","text":"<pre><code>python src/main.py inject -f my_folder --no-backup\n</code></pre> <p>Using full parameter names:</p> <pre><code>python src/main.py inject --folder my_folder --no-backup\n</code></pre>"},{"location":"inject/#notes","title":"Notes","text":""},{"location":"inject/#process-overview","title":"Process Overview","text":"<p>The inject command: 1. Reads the <code>collection.json</code> from <code>input/&lt;folder&gt;</code> 2. Replaces the \"items\" section using the <code>.tif</code> files in that folder 3. Preserves all other collection information 4. Generates an updated <code>collection.json</code></p>"},{"location":"inject/#file-requirements","title":"File Requirements","text":"<ul> <li>The collection folder must be in the <code>input</code> directory</li> <li><code>.tif</code> files must include in their name either:<ul> <li>A year (e.g., <code>2005</code>)</li> <li>A period (e.g., <code>2000_2005</code> or <code>2000-2005</code>)</li> </ul> </li> <li>The folder must contain a valid <code>collection.json</code> file</li> </ul>"},{"location":"inject/#command-behavior","title":"Command Behavior","text":"<ul> <li>By default, creates a backup of the original <code>collection.json</code></li> <li>Use <code>--no-backup</code> to skip backup creation</li> <li>Fails if duplicate years/periods are found in file names</li> <li>The resulting <code>collection.json</code> is ready for collection creation/update</li> </ul>"},{"location":"inject/#best-practices","title":"Best Practices","text":"<ul> <li>Always review the generated <code>collection.json</code> after injection</li> <li>Keep backups of important collections</li> <li>Validate the collection after injection</li> <li>Use consistent naming patterns for your .tif files</li> </ul>"},{"location":"remove/","title":"Remove command","text":"<p>Remove a collection.</p>"},{"location":"remove/#examples","title":"Examples","text":""},{"location":"remove/#remove-by-collection-name","title":"Remove by Collection Name","text":"<pre><code>python src/main.py remove -c my_collection\n</code></pre> <p>Using full parameter name:</p> <pre><code>python src/main.py remove --collection my_collection\n</code></pre> <p>This will remove the collection <code>my_collection</code> from both STAC and Azure storage.</p>"},{"location":"remove/#notes","title":"Notes","text":""},{"location":"remove/#command-behavior","title":"Command Behavior","text":"<ul> <li>This command removes the collection from both:<ul> <li>The STAC catalog</li> <li>Azure Blob Storage</li> </ul> </li> <li>The operation cannot be undone</li> <li>The collection name parameter (-c/--collection) is required</li> <li>Make sure to have proper backup before removing collections</li> <li>Ensure you have the correct permissions in both STAC and Azure</li> </ul>"},{"location":"remove/#best-practices","title":"Best Practices","text":"<ul> <li>Validate the collection name before removal</li> <li>Consider creating a backup before removing important collections</li> <li>Double-check the collection name to avoid accidental deletions</li> </ul>"},{"location":"validate/","title":"Validate command","text":"<p>Validate a collection specification (no upload).</p>"},{"location":"validate/#examples","title":"Examples","text":""},{"location":"validate/#basic-validation","title":"Basic Validation","text":"<p>Using folder name only:</p> <pre><code>python src/main.py validate -f my_folder\n</code></pre> <p>Using full parameter names:</p> <pre><code>python src/main.py validate --folder my_folder\n</code></pre>"},{"location":"validate/#validation-with-collection-name","title":"Validation with Collection Name","text":""},{"location":"validate/#notes","title":"Notes","text":""},{"location":"validate/#general-setup","title":"General Setup","text":"<ul> <li>The collection folder must be placed in the <code>input</code> directory.</li> <li> <p>The input folder must contain:</p> <ul> <li>A <code>collection.json</code> file that describes the collection</li> <li>The corresponding layer files (.tif)</li> </ul> </li> <li> <p>The <code>collection.json</code> must follow the specification described in <code>spec/collection.md</code>.</p> </li> </ul>"},{"location":"validate/#command-behavior","title":"Command Behavior","text":"<ul> <li>This command validates without uploading or modifying any data.</li> <li>If no collection name is provided with <code>-c</code>, the <code>id</code> from collection.json will be used.</li> <li>The command performs comprehensive validation of the collection structure.</li> <li>Use this command before creating/updating collections to ensure data integrity.</li> </ul>"}]}